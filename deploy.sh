#!/bin/bash

# =============================================================================
# Email Sender Pro - Deployment Script
# ุณูุฑูุจุช ูุดุฑ ุชุทุจูู ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงูุฅููุชุฑูููุฉ
# =============================================================================

echo "๐ ุจุฏุก ุนูููุฉ ูุดุฑ Email Sender Pro ุนูู ุงูุฎุงุฏู..."

# ูุชุบูุฑุงุช ุงูุฅุนุฏุงุฏ
APP_NAME="email-sender"
APP_USER="www-data"
APP_GROUP="www-data"
APP_DIR="/var/www/verifix-otp"
REPO_URL="your-git-repo-url-here"
DOMAIN="verifix-otp.escovfair.com"
PYTHON_VERSION="3.11"

# ุฃููุงู ูููุฎุฑุฌุงุช
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ุฏุงูุฉ ุทุจุงุนุฉ ุงูุฑุณุงุฆู
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "ูุฌุจ ุชุดุบูู ูุฐุง ุงูุณูุฑูุจุช ุจุตูุงุญูุงุช ุงููุฏูุฑ (sudo)"
        exit 1
    fi
}

# ุชุญุฏูุซ ุงููุธุงู
update_system() {
    log_info "ุชุญุฏูุซ ุงููุธุงู..."
    apt update && apt upgrade -y
    apt install -y software-properties-common curl wget git
}

# ุชุซุจูุช Python ูุฅุนุฏุงุฏู
install_python() {
    log_info "ุชุซุจูุช Python ${PYTHON_VERSION}..."
    apt install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-venv python${PYTHON_VERSION}-dev
    apt install -y python3-pip
    
    # ุชุซุจูุช pip ููุฅุตุฏุงุฑ ุงููุญุฏุฏ
    curl -sS https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VERSION}
}

# ุชุซุจูุช ูุฅุนุฏุงุฏ PostgreSQL
install_postgresql() {
    log_info "ุชุซุจูุช PostgreSQL..."
    apt install -y postgresql postgresql-contrib libpq-dev
    
    # ุจุฏุก ุงูุฎุฏูุฉ
    systemctl start postgresql
    systemctl enable postgresql
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงููุณุชุฎุฏู
    sudo -u postgres psql << EOF
CREATE DATABASE email_sender_db;
CREATE USER email_user WITH PASSWORD 'email_pass_2025_secure';
GRANT ALL PRIVILEGES ON DATABASE email_sender_db TO email_user;
ALTER USER email_user CREATEDB;
\q
EOF
    
    log_info "ุชู ุฅุนุฏุงุฏ PostgreSQL ุจูุฌุงุญ"
}

# ุชุซุจูุช ูุฅุนุฏุงุฏ Nginx
install_nginx() {
    log_info "ุชุซุจูุช Nginx..."
    apt install -y nginx
    
    # ูุณุฎ ููู ุงูุฅุนุฏุงุฏ
    cp ${APP_DIR}/nginx.conf /etc/nginx/sites-available/${DOMAIN}
    ln -sf /etc/nginx/sites-available/${DOMAIN} /etc/nginx/sites-enabled/
    
    # ุญุฐู ุงููููุน ุงูุงูุชุฑุงุถู
    rm -f /etc/nginx/sites-enabled/default
    
    # ุงุฎุชุจุงุฑ ุงูุฅุนุฏุงุฏ
    nginx -t
    systemctl restart nginx
    systemctl enable nginx
    
    log_info "ุชู ุฅุนุฏุงุฏ Nginx ุจูุฌุงุญ"
}

# ุฅุนุฏุงุฏ SSL ูุน Let's Encrypt
setup_ssl() {
    log_info "ุฅุนุฏุงุฏ SSL Certificate..."
    apt install -y certbot python3-certbot-nginx
    
    # ุงูุญุตูู ุนูู ุดูุงุฏุฉ SSL
    certbot --nginx -d ${DOMAIN} --non-interactive --agree-tos --email admin@${DOMAIN}
    
    # ุฅุนุฏุงุฏ ุงูุชุฌุฏูุฏ ุงูุชููุงุฆู
    crontab -l | { cat; echo "0 12 * * * /usr/bin/certbot renew --quiet"; } | crontab -
    
    log_info "ุชู ุฅุนุฏุงุฏ SSL ุจูุฌุงุญ"
}

# ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุทุจูู
create_app_user() {
    log_info "ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุทุจูู..."
    
    # ุฅูุดุงุก ุงููุณุชุฎุฏู ุฅุฐุง ูู ููู ููุฌูุฏุงู
    if ! id -u ${APP_USER} >/dev/null 2>&1; then
        useradd --system --gid ${APP_GROUP} --shell /bin/bash --home ${APP_DIR} ${APP_USER}
    fi
}

# ุฅุนุฏุงุฏ ูุฌูุฏ ุงูุชุทุจูู
setup_app_directory() {
    log_info "ุฅุนุฏุงุฏ ูุฌูุฏ ุงูุชุทุจูู..."
    
    # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ
    mkdir -p ${APP_DIR}
    mkdir -p /var/log/email_sender
    mkdir -p /var/log/nginx
    
    # ุชุนููู ุงูุตูุงุญูุงุช
    chown -R ${APP_USER}:${APP_GROUP} ${APP_DIR}
    chown -R ${APP_USER}:${APP_GROUP} /var/log/email_sender
    chmod -R 755 ${APP_DIR}
}

# ูุณุฎ ูููุงุช ุงูุชุทุจูู
deploy_application() {
    log_info "ูุดุฑ ุงูุชุทุจูู..."
    
    # ุงูุงูุชูุงู ููุฌูุฏ ุงูุชุทุจูู
    cd ${APP_DIR}
    
    # ูุณุฎ ุงููููุงุช (ูุฌุจ ุชุนุฏูู ูุฐุง ุญุณุจ ุทุฑููุฉ ุงูููู ุงููุณุชุฎุฏูุฉ)
    # ุฅุฐุง ููุช ุชุณุชุฎุฏู Git:
    # git clone ${REPO_URL} .
    # ุฃู ูุณุฎ ุงููููุงุช ูุฏููุงู
    
    # ุฅูุดุงุก ุงูุจูุฆุฉ ุงูุงูุชุฑุงุถูุฉ
    sudo -u ${APP_USER} python${PYTHON_VERSION} -m venv venv
    
    # ุชูุนูู ุงูุจูุฆุฉ ูุชุซุจูุช ุงููุชุทูุจุงุช
    sudo -u ${APP_USER} bash -c "source venv/bin/activate && pip install --upgrade pip"
    sudo -u ${APP_USER} bash -c "source venv/bin/activate && pip install -r requirements.txt"
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    sudo -u ${APP_USER} bash -c "source venv/bin/activate && python init_db.py"
    
    log_info "ุชู ูุดุฑ ุงูุชุทุจูู ุจูุฌุงุญ"
}

# ุฅุนุฏุงุฏ ุฎุฏูุฉ systemd
setup_systemd_service() {
    log_info "ุฅุนุฏุงุฏ ุฎุฏูุฉ systemd..."
    
    # ูุณุฎ ููู ุงูุฎุฏูุฉ
    cp ${APP_DIR}/email-sender.service /etc/systemd/system/
    
    # ุฅุนุงุฏุฉ ุชุญููู systemd ูุจุฏุก ุงูุฎุฏูุฉ
    systemctl daemon-reload
    systemctl start ${APP_NAME}
    systemctl enable ${APP_NAME}
    
    log_info "ุชู ุฅุนุฏุงุฏ ุฎุฏูุฉ systemd ุจูุฌุงุญ"
}

# ุฅุนุฏุงุฏ ุฌุฏุงุฑ ุงูุญูุงูุฉ
setup_firewall() {
    log_info "ุฅุนุฏุงุฏ ุฌุฏุงุฑ ุงูุญูุงูุฉ..."
    
    ufw --force enable
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow 'Nginx Full'
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    log_info "ุชู ุฅุนุฏุงุฏ ุฌุฏุงุฑ ุงูุญูุงูุฉ ุจูุฌุงุญ"
}

# ุงูุชุญูู ูู ุญุงูุฉ ุงูุฎุฏูุงุช
check_services() {
    log_info "ุงูุชุญูู ูู ุญุงูุฉ ุงูุฎุฏูุงุช..."
    
    echo "ุญุงูุฉ PostgreSQL:"
    systemctl status postgresql --no-pager -l
    
    echo "ุญุงูุฉ Nginx:"
    systemctl status nginx --no-pager -l
    
    echo "ุญุงูุฉ ุงูุชุทุจูู:"
    systemctl status ${APP_NAME} --no-pager -l
    
    echo "ุงุฎุชุจุงุฑ ุงูุงุชุตุงู:"
    curl -I https://${DOMAIN}
}

# ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
main() {
    log_info "ุจุฏุก ุชุซุจูุช Email Sender Pro..."
    
    check_root
    update_system
    install_python
    install_postgresql
    install_nginx
    create_app_user
    setup_app_directory
    
    log_warn "ูุฑุฌู ูุณุฎ ูููุงุช ุงูุชุทุจูู ุฅูู ${APP_DIR} ุซู ุชุดุบูู:"
    log_warn "sudo bash deploy.sh continue"
}

# ุฅููุงู ุงูุชุซุจูุช
continue_deployment() {
    log_info "ุฅููุงู ุนูููุฉ ุงููุดุฑ..."
    
    deploy_application
    setup_systemd_service
    setup_ssl
    setup_firewall
    check_services
    
    log_info "๐ ุชู ูุดุฑ Email Sender Pro ุจูุฌุงุญ!"
    log_info "ููููู ุงููุตูู ูููููุน ุนูู: https://${DOMAIN}"
    log_info "ูููุฑุงูุจุฉ: sudo journalctl -u ${APP_NAME} -f"
}

# ุชุญุฏูุฏ ุงูุนูููุฉ ุงููุทููุจุฉ
case "${1:-main}" in
    main)
        main
        ;;
    continue)
        continue_deployment
        ;;
    *)
        echo "ุงูุงุณุชุฎุฏุงู: $0 [main|continue]"
        exit 1
        ;;
esac
